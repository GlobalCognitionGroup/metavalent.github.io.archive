Advances In Growing Neural Cellular Automata

    
This work is part of an ongoing research project at the Oslomets Live Technology Lab, part of the Oslmet AI Lab funded by the Norwegian Research Council and DeepCA. One of the most recent work at Google deals with growing neural cellular automatons with continuous CA: Neural networks are trained to control the growth process of a particular form and to regenerate themselves, and the goal is to extend such continuous CA to a world map of specific cells in the system whose inputs and outputs are aligned to the given form. This is done by training neural networks to achieve specific input and output functions, creating a physical and simulated CA process that can learn to solve a particular task, a kind of "cellular automaton brain" (Mordvintsev, Alexander et al. An example of such a case is the continuous CA Lenia. [Sources: 6] 
    
Let us speculate on what a more physical implementation of this system might look like. We can imagine it as a grid of tiny independent computers that simulate individual cells. Each tiny independent computer would need 10 KB of ROM to store the cell genome, the weights of neural networks, and the control code, and 256 bytes of RAM for cell states and intermediate activations. The model described in this article would run on a powerful GPU in a modern computer or smartphone. [Sources: 3] 
    
Figure 15: The Three-Eyed Monster by Keith Haring, image based on the public repository. The neural network architecture is designed to iterate over 80,000 CA versions with different update rules. However, due to its complexity, this number of iterations is not sufficient to obtain an exact reproduction of the target image, such as the three-eyed monster. Figure 16: The network does not find the correct update rule, and the cell grows chaotic (Figure author). [Sources: 2] 
    
It seems that the system needs to execute some kind of bucket brigade algorithm to move the input data into the output. A primitive building block for more complex problems is copying the input matrix from one place to another. At a high level, this seems a trivial task. If you were to build a physical circuit for this task, it would be easy to connect the input and output wires. Given the constraints of homogeneous computing media (communication between immediate neighbors is not permitted, and the likelihood of failure at the time of transmission is high), the task is not so easy. [Sources: 5] 
    
This project aims to recreate the work of art starting from the sperm. We will use a supervised neural network to find the best update rules and recreate the image in several steps. It will optimize itself through physics, calculation and the laws of millions of years of evolution. [Sources: 2] 
    
Each cell applies a series of operations to the perception vector, consisting of typical differentiable programming modules such as 1x1 turns, relau nonlinearity, and what we call cell update rules. Remember that update rules are learned from cells that perform the same update rule over and over again. The network is parameterized by update rules consisting of 8000 parameters. [Sources: 3] 
    
The transitions between voxels in a cell are determined by the neural network that uses the cellular state of the adjacent four voxels. Voxel costs are introduced to prevent a caste-like morphology. We use similar, overlapping costs to steer the model in such a way that it generates only the cells it needs to reconstruct the target. [Sources: 1] 
    
For example, one can assume that the growth information of a neuron or cell is an empty cell line of cellular automata (2a, 2b, 2c) with a random initial state. These automata, 2a2b and 2c, operate in growth mode and form certain neural networks. [Sources: 0] 
    
Predefined update rules for the neural network output Markov chains. The weights of the NCAs neuronal layers act as target image passage encoders. This improves the generalizability of the resulting model for restricted 2D images. [Sources: 1] 
    
The cellular automata 2a, 2b and 2c form certain neural network-controlled functions in the evaluation mode (part 8) by comparing the signals 9a and 9b, which are expressed as outputs of the resulting signal 7, with the input signal 10, which is expressed as the evaluation value of the evaluation reflected in part 11. The assessment is reflected in Part 11. This part selects two cellular automata to be evaluated and decides on the initial states, such as the growth information of neurons in a cell or an empty cell, the cellular automaton in these states, with a small number of random changes. The decision is made on the basis of these initial states, and the state is recombined with the initial state of the remaining cellular automakers as part of this initial state, with small amounts of random changes. [Sources: 0] 
    
They are seen as representations of the chemical and physical interactions that biological cells experience. The first three channels are RGB, the fourth is the alpha channel for transparency, and the other channels are invisible and have no predetermined meaning. An updated rule is learned to use these channels to reach the target image. [Sources: 2] 
    
There are a number of papers analyzing and comparing 256 cellular automata. They are denoted by their tungsten codes (a standard naming convention invented by tungsten) and are given rule numbers from 0 to 255. Each rule consists in determining the pattern of the cells from 1 to 0 for the next generation. The animation is a way for the rules of a 1D automaton to determine the next generations. Rule 30 and Rule 110 are the most interesting. [Sources: 4] 
    
One way to simulate a two-dimensional cellular automaton is to have an infinite sheet of graph paper with a set of rules that each cell must follow. Each square is called a cell, and each cell has two possible states: black or white. A neighborhood is a cell located near an adjacent cell. [Sources: 4] 
    
If we want our model to show consistent and precise regenerative capabilities, we should try to increase the attraction to our target pattern by increasing the space in which the cell configuration gravitates toward our target shape. [Sources: 3] 
    
Cellular automata can be simulated for a variety of real systems, including biological and chemical systems. A special type of cellular automaton is reversible: a single configuration can lead to subsequent ones, and the totalistic future value of a single cell depends on the total value of a group of adjacent cells. [Sources: 4] 
    





Sources:
    
[0]: http://www.google.com.et/patents/US6061674
    
[1]: https://www.arxiv-vanity.com/papers/2103.08737/
    
[2]: https://towardsdatascience.com/neural-cellular-automata-for-art-recreation-6d9fb61afb37
    
[3]: https://distill.pub/2020/growing-ca
    
[4]: https://en.wikipedia.org/wiki/Cellular_automaton
    
[5]: https://github.com/PWhiddy/Growing-Neural-Cellular-Automata-Pytorch
    
[6]: http://www.nichele.eu/thesis.html
    

